// eslint-disable-next-line import/named
import { Call, Contract, Provider } from 'ethcall'
import { wallet } from '../wallet'
import Vue from 'vue'
import { when } from '~/lib/event'
import pRetry from 'p-retry'
import { ethers } from 'ethers'
import chunk from 'lodash/chunk'
export class Multicall {
  address!:string
  cache = new Map()
  lock = false
  limit = 20
  tasks: {
    key: string
    call: any
    resolve: any
    result?: any
    reject: any
  }[] = []
  readProvider: ethers.providers.Provider
  get provider() {
    const provider = new Provider()
    // @ts-ignore
    provider.multicall3 = {
      address: this.address,
    }
    if (this.readProvider) {
      provider.init(this.readProvider)
      return provider
    }
  }

  constructor(args: Partial<Multicall>) {
    Object.assign(this, args)
  }

  async tryAll(calls: Call[]) {
    return this.provider.tryAll(calls)
  }

  async load(key: string, call: any) {
    await when(() => wallet?.currentChainId && this.provider)
    key = `${wallet?.currentChainId}-${key}`
    if (this.cache.has(key)) {
      return this.cache.get(key)
    }
    const res = this.addQueue(key, call)
    if (!this.lock) {
      this.processQueue()
    }
    this.lock = true
    return res
  }

  addQueue(key: string, call: any) {
    const res = new Promise((resolve, reject) => {
      this.tasks.push({
        key,
        call,
        resolve,
        reject,
      })
    })
    this.cache.set(key, res)
    return res
  }
  processQueue () {
    const address = ["0xf719cE1a8011514fcaB099709F14cAE1a7B8A63d","0xE43EBA50507A5e84E7B87F4e7552C5c7404F947E","0x1AE47e5Fe02F23C0cF22c5F80Fb877B15d86688B","0xfE38a568D76dc6581895a3d43E84142C6694fffd","0x710F2d57d963ad8554f99aee0c3bC554C4FCcA9e","0xe52850947352A859a4290E22832B0b0040DFB493","0xd991Cf47902296764E2d56Bea5df19eDa284A676","0xb6830b9547F736E38d6A7024d52Bb652BfBd5dCC","0x6e343BD02120303226E9e9c6b4AcAFEF9Ea0E7D6","0xB2f66133C0017D08b91a50e5865C8DBe4d9A477f","0x429D6eCbFdd68bAD50eAeb031477E56Ca18C35d6","0x43Ecdfb53449e26A7ca7a1c319eD3f97E2908567","0x8A75273b65986b8e27c5b8FC0Dc81748B8801e90","0xDE2A0000fc60FB4aab75B2Ca25d07C36cc764869","0x733a13a6628FAdd9AEa04e5e334810fD697B9B6d","0x2eB5d6402CEA464d158ca4574007dFb09eD88923","0x6941bb9FFe4603cdE1276806548C375B144AcDBd","0x131A2979055d41e9D7A3aB49dEbc13912401a9f0","0x99fF5999872fB1C560269E5062E77c7BFa838481","0x6fdBc90AEe00Cb11E0E4B5B1676D5956627d7F0e","0x316EE1Afb2EFdCef7e2e3931DEd801B32bd04776","0xbcd2042254128cfDFbb84aA916985e238a7EA5bd","0x96C4491CFD74fBB7dAb175dA0906FF6284fFD231","0x85C3b48b9732e21d1705df96832344cebf9bf61A","0x999A2762D57c8B32015f2bbc3e54B59816325Cf1","0x752614CCa1Dd847e9b063544e3F9f4E4146F23d7","0x42A03Bb2De84eA79afBc7f76EBCC5bCf88999368","0x03e2f7c8CAEFaE238e04709FCf53b40C8fdAE852","0xE672A9511975D47b0b15e0bdCcE3d6fbECeb549d","0xc5AddeA65D5Eba8e0b55Bc973Bfc9F3D35721aba","0xd6752e91589C8F5e6463eB6C6D7569A5F8b29a57","0xebd7371F20Ae556F0eB9f760448F3F930F5cD2E5","0x9F0195Aa4fc14ad85E5375Cf70e5465D6dD87358","0xd8578DD583a4d01aA9e988B4897cB086Ec283f2D","0x151fF2805299a1085E478364668cE001a0a42D0A","0x186CA0F185bC11EbDb7a15beDF71BD5B2BE4DC8A","0xA914152FC1f4eBE02A54c835350788caDdCcfA6e","0xe54b2E9979B55214E56DE89Cc3b26e59e1B5ceDf","0xd1228675b93990bD6469dcc91E61fb5B8DD88d14","0x06f8C367359534d97eAbf63DF06EF395D29615B6","0x426e624A7049D54eb6956E3b2C6A36b92b111f08","0xfC1D3C57bFC5b6DAA3003CC759bF35691f5cE454","0xa0e2644C849A54d347a1d8E5a94EB74F203485D7","0xc8f2CfC95Db4E1cc98967FE234BF85898E77FFC5","0xd66bf22795E041C20314C9876227dD49f4f54508","0x7E6227F5e689134913bECAbA60854a92b5B51c0a","0xF23fa7b17FF6eb3d6C093ecEe238f71D9EA77B21","0x6f7a81436d15b576804869CdE68C1A2841cc0156","0xcb7bbF6fB8624BABcdca5c8AdCC5D7152F8853fB","0xa9BB9d69465127f2378d2EA97f3B98a2ae3208bC","0x3646dC24a77a48CD2c8d477090ec7f4343B39107","0xC1c798e6DD71982a236d05938fA9cd5189501785","0x09d62d7F38c849B1c648d1Fa5F13414e2913F5EB","0x75BC9d81051f5E02CB43e3F7DB96E635e5C84757","0x7C34533da0Af80BD675427cC7751D5e149dB0361","0xA29daea9f84833C5c3ae28B7F67299DdBaC54e3a","0x66806CDFb333fc5B5224EeE6E96B1daBE995C928","0x9127E8AD00B641b17c4189E46A0b44e78D361fd4","0xa69e7C34830A35c417897fF09a35fE16f7765F9f","0xd66749fb48951E27C9A1b9B3258ea6C2bA6f2811","0x38De47411e46F4B028A34304939fb9FC4485b6AA","0xee802d2db07515CC75B847b05eD9b26D5A7758bE","0x06dbF449d963584992582753977cfBBB9fA04D57","0xC7EBba0C969e21FC7821F08b63AAFE9E3d4D2cB3","0xCb016455BE20A5eE4e30dF358557EA7a8b6cf809","0x606389a37126e523E411A46ADA9F0C2060e3539f","0x02AF1EBD3e9Def8192d400A08B43D264D16685dF","0x3a88a0692B10e03d24EA87fF10eF14CD3e420E07","0x7ab4430566D435b615ccF532B416CE90c7242AFf","0x3e8af8b6d5E795f948a41ccE44099f6E345b812b","0x49D9c2C404542946e97acE3ad71E7008557C8A21","0x7472bC3a04621452509734B8bc04DD689df09431","0x1236E1601d9583bF7B4fbF6A3553AF9bEf4dd8d3","0xEC9eEb675f19c89d012316Facd234030D1E00E92","0x0370C020B1848CD92039b4f952d63Ab5305Ba18c","0xDb7d2dCFE40Dc6b7886249749f3529A7008f0ea7","0x7c84D11D1A328Ac84f5d656D4230D29AA8426Da9","0x0B33773D0bE6e8D723AC2F4ED57cb841B4573dEA","0xe1d51cf76F045FD16baB44f78b8E89aF16D4439f","0x1Da5cEe8932DE8feEcaCC286A34b419a266AdD62","0x9C863Cf71D1906b172c4C8fc627F96C47443B37b","0x3168e8f355B4C381Dd6bE617DbD73CC98DAfccCd","0xF9a4FdAdf166Eeab9aC774bdC0Ac23892c44A2d0","0x0C53ad014908E5E7A431347274F43D28CC171B3b","0x80730A0c7Ca55905EE214dbB6513073186C9AAA4","0x2f8b6F35519673fA9Fd71efeE74b7F0b85233d48","0xfe1eC9C2e3220D0717bCE2D855D68aca0f9b43c3","0xe96A0DC63F38e26909bc74ded7674180528A10E7","0x41C9F3870C30100126aa501ae00025281B5F02F6","0xc6Bceef86488776BAA3a6cFEc4C89b6050e53B54","0x964FDb5275B3a9809895753113AAdF7f3cB14293","0xf335f8B3E6D12D1B12f22B1A17421B0f6044DB13","0xE26C8eb5bf77Ca5DD15A37Ab73F1203DaBd530c9","0x3f6a2C41A2B01ed96d1b8939c410E73F2c5a58fA","0x0bDd685588bfB8cAA66732FD354CED2456D0295E","0xAa04E996d3675dB838B3B2f0Cb72b49D0e138Db5","0xb843963a332081C14fa5C3066B3929b7c6931e24","0x38dF3faA4e4762A4A45069aCA75Bb6333B5a6Dc9","0xe9b863cfa7F1011E6AD8B6aeebfE7054BE8e6D06","0xA5305E708E3015E6c2201Fb63adA133933246AE3","0xAb0f990F71a1863A88cCD320260797753b9767A5","0x5298B1fE58daFb4B0df0C8B186F04B3b53B40D54","0xce8D215686068042Cfeb558878727A55c95FAa68","0x6710A43c481e6D425c6e3Ad27715F41B55E72b05","0x06E4308B37f52fC251286fc11a13B90e6B6C6aD1","0x4ACd7D356563b9d2EE7111A0A8203084c97D7c25","0x7EC2418cD65d353a22B18c274EEB42F8D1183f76","0xD8A12EAecfaD1e13d7b96d7966F372b733ddaf93","0x2b5F124DBDEF34832d3e8Dcb901eF0dd6124b915","0x1e1a6206D3781D18C311fbD89Dbe9CE231D323E0","0x4B45Bb768e67A234b9899c453a37d31Db8581740","0xD56c1E0DeE6e072E55594A28EF38C2A3453e621d","0x334065e2582C80A24Fac4c89A90e016F6779edB1","0xC2AffcdC3Ef1e2BE9A994D5874917B50464DD7D3","0xBAB23136d3B698a0C38250c1A82d0339Db900db1","0x3cb3256c60A3f97EFB9E02e66DC94A714a599683","0x630778Cc5995f60aE390279404Cf55c64e7E97e4","0xb0D4416D0fdE4DdC7D9209048f7360Fd7396CDD2","0xD42005744D8Fb26af852f5fA960d28e8A391976f","0x4C5337533c041bc998AE0c09236C7e6b9F3f51f1","0x550fd448Ba124F2a937976174e0826300c70199e","0xF94EEB5Bc01FC009c21cE9Ad810AD75ac73Ab9F2","0xb3F18cd321154C4824EfaeDA447f02f5BE39c55a","0x9c41390C06C8E9768d7749D998Ed7853b55d4d92","0x69FA698a61D3C7A18Fb9a6520ade29Af4206DDc4","0x51D3e98818f88BaD3F709DeF62ceee24F7378088","0x8b50eAA58c9a2D22c652Fc6De127F8283201815A","0x2359C2297712230530DfE67AD29dA18A2158C375","0x6cE1c5BB764Bef2cf52Af622C769cDa44FddeA0A","0xf1F9Cd3377ab956066dF9D687D4E88bB271De538","0x802B3792b1b1Aca4C1242ac5aE38D6A1D474CB80","0x88e56b3922E5f58b7C5a92B18d174Fd3485123a0","0xAce5C0CBB4a50cedEDF45E84665985f5DE5a0a11","0x9Ac0F016CE8BA42cd176fC64fE3F77F68a9F07a9","0x4E2a79e8d5923AB2dEDd7a796645C6F76a766510","0xfb0a37Ad0614AeD7aB45A470b120CAc40C0F0e51","0x98Ad98B9D115079A942b06e55167FA165AcE6689","0xc97a1b20d77DE8bd9dD03fE5D82A9F6E470aE72E","0x705FafA3415B56f17A383ebF483BbCefd666CBDf","0x2D8f787d1a81B0A7fa4Cb6629F9253C72342EA46"]
    setTimeout(async () => {
      const tasks = this.tasks
      this.tasks = []
      this.cache.clear()
      this.lock = false
      chunk(tasks, this.limit).forEach(async (chunkTasks) => {
        const data = await this.tryAll(chunkTasks.map((t) => t.call))
        chunkTasks.forEach((t, index) => {
          t.result = data[index]
          t.resolve(data[index])
        })
        chunkTasks.forEach((t) => {
          if (address.find(a => t.key.includes(`${a.toLowerCase()}-0x9f593f190cdf2207148a2ba6ab617f010387bca2-getBalance`))) {
            console.log(t.key, t.result?.toString())
          }

        })
      })
    }, 500)

  }
}

